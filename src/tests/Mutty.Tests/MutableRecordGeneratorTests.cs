// Copyright (c) 2020-2024 Atypical Consulting SRL. All rights reserved.
// Atypical Consulting SRL licenses this file to you under the Apache 2.0 license.
// See the LICENSE file in the project root for full license information.

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Mutty.Generator;
using NUnit.Framework;

namespace Mutty.Tests;

public class MutableRecordGeneratorTests
{
    [SetUp]
    public void Setup()
    {
    }

    [Test]
    public void ShouldGenerateMutableRecord()
    {
        // Arrange
        var input = GetInput();
        var outputMutable = GetOutputMutable();
        var outputExtensions = GetOutputExtensions();

        // Act
        var generatedOutputs = GetGeneratedOutput(input);
        var resultMutable = generatedOutputs.First(x => x.Contains("class MutableStudentDetails"));
        var resultExtensions = generatedOutputs.First(x => x.Contains("class StudentDetailsExtensions"));

        // Assert
        Assert.Multiple(() =>
        {
            Assert.That(resultMutable, Is.EqualTo(outputMutable));
            Assert.That(resultExtensions, Is.EqualTo(outputExtensions));
        });
    }

    private static string[] GetGeneratedOutput(string sourceCode)
    {
        var syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
        var references = AppDomain.CurrentDomain.GetAssemblies()
            .Where(static assembly => !assembly.IsDynamic)
            .Select(static assembly => MetadataReference.CreateFromFile(assembly.Location))
            .Cast<MetadataReference>()
            .Concat([MetadataReference.CreateFromFile(typeof(MutableGenerationAttribute).Assembly.Location)]);

        var compilation = CSharpCompilation.Create(
            "SourceGeneratorTests",
            [syntaxTree],
            references,
            new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

        // Source Generator to test
        var generator = new MutableRecordGenerator();

        CSharpGeneratorDriver.Create(generator)
            .RunGeneratorsAndUpdateCompilation(
                compilation,
                out var outputCompilation,
                out var diagnostics);

        // optional
        Assert.That(
            diagnostics.Where(static d => d.Severity == DiagnosticSeverity.Error),
            Is.Empty);

        var generatedOutput = outputCompilation
            .SyntaxTrees
            .Skip(1)
            .Select(static tree => tree.ToString())
            .ToArray();

        return generatedOutput;
    }

    private static string GetInput()
    {
        return
            """
            using System.Collections.Immutable;
            using Mutty;
            using Mutty.Tests.Setup;
            
            namespace Mutty.Tests;
            
            [MutableGeneration]
            public record StudentDetails(string Name, int Age);
            """;
    }

    private static string GetOutputMutable()
    {
        return
            """
            // <auto-generated />
            // This file is auto-generated by Mutty.
            
            using System.Collections.Immutable;
            
            namespace Mutty.Tests
            {
                /// <summary>
                /// The mutable wrapper for the <see cref="StudentDetails"/> record.
                /// </summary>
                public partial class MutableStudentDetails
                {
                    private StudentDetails _record;
            
                    /// <summary>
                    /// Initializes a new instance of the <see cref="MutableStudentDetails"/> class.
                    /// </summary>
                    /// <param name="record">The record to wrap.</param>
                    public MutableStudentDetails(StudentDetails record)
                    {
                        _record = record;
            
                        Name = _record.Name;
                        Age = _record.Age;
                    }
            
                    /// <summary>
                    /// Builds a new instance of the <see cref="StudentDetails"/> class.
                    /// </summary>
                    public StudentDetails Build()
                    {
                        return _record with
                        {
                            Name = this.Name,
                            Age = this.Age,
                        };
                    }
            
                    /// <summary>
                    /// Performs an implicit conversion from <see cref="StudentDetails"/> to <see cref="MutableStudentDetails"/>.
                    /// </summary>
                    public static implicit operator MutableStudentDetails(StudentDetails record)
                    {
                        return new MutableStudentDetails(record);
                    }
            
                    /// <summary>
                    /// Performs an implicit conversion from <see cref="MutableStudentDetails"/> to <see cref="StudentDetails"/>.
                    /// </summary>
                    public static implicit operator StudentDetails(MutableStudentDetails mutable)
                    {
                        return mutable.Build();
                    }
            
                    /// <summary>
                    /// Gets or sets the Name.
                    /// </summary>
                    public string Name { get; set; }
            
                    /// <summary>
                    /// Gets or sets the Age.
                    /// </summary>
                    public int Age { get; set; }
                }
            }

            """;
    }

    private static string GetOutputExtensions()
    {
        return
            """
            // <auto-generated />
            // This file is auto-generated by Mutty.
            
            using System.Collections.Immutable;
            
            namespace Mutty.Tests
            {
                /// <summary>
                /// The mutable extensions for the <see cref="StudentDetails"/> record.
                /// </summary>
                public static class StudentDetailsExtensions
                {
                    /// <summary>
                    /// Produces a new instance of the <see cref="StudentDetails"/> record.
                    /// </summary>
                    public static StudentDetails Produce(this StudentDetails baseState, Action<MutableStudentDetails> recipe)
                    {
                        var draftState = new MutableStudentDetails(baseState);
                        recipe(draftState);
                        var resultState = draftState.Build();
                        return resultState;
                    }
            
                    /// <summary>
                    /// Creates a new instance of the <see cref="MutableStudentDetails"/> record.
                    /// </summary>
                    public static MutableStudentDetails CreateDraft(this StudentDetails baseState)
                    {
                        return new MutableStudentDetails(baseState);
                    }
            
                    /// <summary>
                    /// Finishes the draft and builds a new instance of the <see cref="StudentDetails"/> record.
                    /// </summary>
                    public static StudentDetails FinishDraft(this MutableStudentDetails draft)
                    {
                        return draft.Build();
                    }
            
                    /// <summary>
                    /// Converts a collection of <see cref="StudentDetails"/> records to mutable.
                    /// </summary>
                    public static List<MutableStudentDetails> AsMutable(this IEnumerable<StudentDetails> baseStates)
                    {
                        return baseStates.Select(e => new MutableStudentDetails(e)).ToList();
                    }
            
                    /// <summary>
                    /// Converts a collection of <see cref="MutableStudentDetails"/> records to immutable.
                    /// </summary>
                    public static ImmutableList<StudentDetails> ToImmutable(this IEnumerable<MutableStudentDetails> mutableStates)
                    {
                        return mutableStates.Select(x => x.Build()).ToImmutableList();
                    }
                }
            }
            
            """;
    }
}
