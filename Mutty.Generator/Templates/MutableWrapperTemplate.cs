using System;
using System.Collections.Immutable;
using System.Linq;
using Mutty.Generator.CodeHelpers;
using Mutty.Generator.Models;

namespace Mutty.Generator.Templates;

public class MutableWrapperTemplate(RecordTokens tokens) : IndentedCodeBuilder
{
    private readonly string _namespaceName = tokens.NamespaceName;
    private readonly string _recordName = tokens.RecordName;
    private readonly ImmutableArray<Property> _properties = tokens.Properties;

    public string Generate()
    {
        CommentAutoGenerated();
        Line("using System.Collections.Immutable;");
        EmptyLine();
        Line($"namespace {_namespaceName}");
        Braces(() =>
        {
            Line("/// <summary>");
            Line($"/// The mutable wrapper for the <see cref=\"{_recordName}\"/> record.");
            Line("/// </summary>");
            Line($"public class Mutable{_recordName}");
            Braces(() =>
            {
                Line($"private {_recordName} _record;");
                GenerateConstructor();
                GenerateBuilderMethod();
                GenerateImplicitOperatorToMutable();
                GenerateImplicitOperatorToRecord();
                GenerateProperties();
            });
        });

        return ToString();
    }

    private void GenerateConstructor()
    {
        EmptyLine();
        Line("/// <summary>");
        Line($"/// Initializes a new instance of the <see cref=\"Mutable{_recordName}\"/> class.");
        Line("/// </summary>");
        Line($"/// <param name=\"record\">The record to wrap.</param>");
        Line($"public Mutable{_recordName}({_recordName} record)");
        Braces(() =>
        {
            Line("_record = record;");
            EmptyLine();
            foreach (var property in _properties)
            {
                switch (property.PropertyType)
                {
                    case PropertyType.ImmutableCollection:
                        Line($"{property.Name} = _record.{property.Name}.AsMutable();");
                        break;
                    case PropertyType.Record:
                    case PropertyType.Other:
                    default:
                        Line($"{property.Name} = _record.{property.Name};");
                        break;
                }
            }
        });
    }
    
    private void GenerateBuilderMethod()
    {
        EmptyLine();
        Line("/// <summary>");
        Line($"/// Builds a new instance of the <see cref=\"{_recordName}\"/> class.");
        Line("/// </summary>");
        Line($"public {_recordName} Build()");
        Braces(() =>
        {
            Line("return _record with");
            Braces(() =>
            {
                foreach (var property in _properties)
                {
                    switch (property.PropertyType)
                    {
                        case PropertyType.Record:
                            Line($"{property.Name} = this.{property.Name},");
                            break;
                        case PropertyType.ImmutableCollection:
                            Line($"{property.Name} = this.{property.Name}.ToImmutable(),");
                            break;
                        case PropertyType.Other:
                            Line($"{property.Name} = this.{property.Name},");
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                }
            }, ";");
        });
    }

    private void GenerateProperties()
    {
        foreach (var property in _properties)
        {
            EmptyLine();
            Comment($"{property.PropertyType}");
            
            switch (property.PropertyType)
            {
                case PropertyType.Record:
                    GenerateNestedMutableProperty(property);
                    break;
                case PropertyType.ImmutableCollection:
                    GenerateCollectionProperty(property);
                    break;
                case PropertyType.Other:
                    GenerateSimpleProperty(property);
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
    }

    private void GenerateSimpleProperty(Property property)
    {
        var propertyType = property.Type;
        var propertyName = property.Name;

        Line($"public {propertyType} {propertyName} {{ get; set; }}");
    }

    private void GenerateNestedMutableProperty(Property property)
    {
        var propertyType = property.Type;
        var propertyName = property.Name;
        var mutableTypeName = $"Mutable{propertyType.Split('.').Last()}";

        Line($"public {mutableTypeName} {propertyName} {{ get; set; }}");
    }

    private void GenerateCollectionProperty(Property property)
    {
        var propertyName = property.Name;
        var immutableType = property.Type;
        var mutableType = ConvertImmutableToMutable(immutableType);
        var mutableItemType = GetMutableItemType(immutableType);

        Line($"public {mutableType}<Mutable{mutableItemType}> {propertyName} {{ get; set; }}");
    }

    private string ConvertImmutableToMutable(string immutableType)
    {
        if (immutableType.StartsWith("System.Collections.Immutable.ImmutableList"))
        {
            return "List";
        }

        if (immutableType.StartsWith("System.Collections.Immutable.ImmutableArray"))
        {
            return "List"; // Use List for array conversions in this context
        }
        
        // Handle other types as needed
        return immutableType;
    }

    private string GetMutableItemType(string immutableType)
    {
        var genericTypeIndex = immutableType.IndexOf('<');
        if (genericTypeIndex > 0)
        {
            var itemType = immutableType.Substring(genericTypeIndex + 1, immutableType.Length - genericTypeIndex - 2);
            return itemType.Split('.').Last();
        }
        return immutableType;
    }

    private void GenerateImplicitOperatorToMutable()
    {
        EmptyLine();
        Line($"public static implicit operator Mutable{_recordName}({_recordName} record)");
        Braces(() =>
        {
            Line($"return new Mutable{_recordName}(record);");
        });
    } 

    private void GenerateImplicitOperatorToRecord()
    {
        EmptyLine();
        Line($"public static implicit operator {_recordName}(Mutable{_recordName} mutable)");
        Braces(() =>
        {
            Line("return mutable.Build();");
        });
    }
}
