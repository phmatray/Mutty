using Mutty.Generator.CodeHelpers;
using Mutty.Generator.Models;

namespace Mutty.Generator.Templates;

public class MutableExtensionsTemplate(RecordTokens tokens) : IndentedCodeBuilder
{
    private readonly string _recordName = tokens.RecordName;
    
    public string Generate()
    {
        CommentAutoGenerated();
        Line("using System.Collections.Immutable;");
        EmptyLine();
        Line($"namespace {tokens.NamespaceName}");
        Braces(() =>
        {
            Line($"public static class {_recordName}Extensions");
            Braces(() =>
            {
                // Produce method
                Line($"public static {_recordName} Produce(this {_recordName} baseState, Action<Mutable{_recordName}> recipe)");
                Braces(() =>
                {
                    Line($"var draftState = new Mutable{_recordName}(baseState);");
                    Line("recipe(draftState);");
                    Line("var resultState = draftState.Build();");
                    Line("return resultState;");
                });
                
                // AsMutable method
                EmptyLine();
                Line($"public static List<Mutable{_recordName}> AsMutable(this IEnumerable<{_recordName}> baseStates)");
                Braces(() =>
                {
                    Line($"return baseStates.Select(e => new Mutable{_recordName}(e)).ToList();");
                });
                
                // ToImmutable method
                EmptyLine();
                Line($"public static ImmutableList<{_recordName}> ToImmutable(this IEnumerable<Mutable{_recordName}> mutableStates)");
                Braces(() =>
                {
                    Line($"return mutableStates.Select(x => x.Build()).ToImmutableList();");
                });
            });
        });

        return ToString();
    }
}